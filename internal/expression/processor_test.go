package expression

import "testing"

func TestProcessor(t *testing.T) {
	testCases := []struct {
		name        string
		input       string
		expected    string
		expectError bool
	}{
		// --- Базовые случаи ---
		{
			name:     "Строка без выражений",
			input:    "Это просто обычный текст.",
			expected: "Это просто обычный текст.",
		},
		{
			name:     "Пустая строка",
			input:    "",
			expected: "",
		},
		{
			name:     "Простое выражение в начале строки",
			input:    "5 + 5 равно 10",
			expected: "10 равно 10",
		},
		{
			name:     "Простое выражение в конце строки",
			input:    "Десять это 5 * 2",
			expected: "Десять это 10",
		},
		{
			name:     "Простое выражение в середине строки",
			input:    "Прибыль: 100 - 10 долларов.",
			expected: "Прибыль: 90 долларов.",
		},

		// --- Случаи с несколькими выражениями ---
		{
			name:     "Два несвязанных выражения",
			input:    "Доход 100 * 2, расход 50 + 25.",
			expected: "Доход 200, расход 75.",
		},
		{
			name:     "Два одинаковых выражения",
			input:    "Сумма 2+2 и еще раз 2+2.",
			expected: "Сумма 4 и еще раз 4.",
		},
		{
			name:     "Выражения вплотную друг к другу",
			input:    "Результаты: 5*5, 10/2, 1+1",
			expected: "Результаты: 25, 5, 2",
		},
		{
			name:     "Выражения содержит отрицательное число отделенное",
			input:    "-9 -1 равно -10",
			expected: "-10 равно -10",
		},

		// --- Сложные случаи и "мусор" ---
		{
			name:        "Строка с валидным и невалидным выражением",
			input:       "Результат (2+2), а не (2++2).",
			expected:    "Результат 4, а не (2++2).",
			expectError: true,
		},
		{
			name:     "Строка только с невалидными выражениями",
			input:    "Это все мусор: 2 . 2 и 5 +",
			expected: "Это все мусор: 2 . 2 и 5 +",
		},
		{
			name:     "Сложное выражение со скобками и унарным минусом",
			input:    "Ответ для 5 * -(-2 - 2) должен быть 20.",
			expected: "Ответ для 20 должен быть 20.",
		},
		{
			name:     "Выражение, результат которого короче",
			input:    "Очень длинное выражение 1+1+1+1+1+1 было заменено.",
			expected: "Очень длинное выражение 6 было заменено.",
		},
		{
			name:     "Выражение, результат которого длиннее (с дробной частью)",
			input:    "Часть от 10 / 3 это...",
			expected: "Часть от 3.3333333333333335 это...", // <-- govaluate вернет такое
		},
		{
			name:     "Кириллица и выражения",
			input:    "Было 100 * 5 яблок, стало 500.",
			expected: "Было 500 яблок, стало 500.",
		},
	}
	for _, tc := range testCases {
		test := tc
		t.Run(test.name, func(t *testing.T) {
			// Используем t.Parallel() для ускорения тестов
			t.Parallel()

			actual, err := ProcessString(test.input)
			if err != nil && !test.expectError {
				t.Fatalf("Функция вернула неожиданную ошибку: %v", err)
			} else if err == nil && test.expectError {
				t.Fatalf("expect error, but not get it")
			}

			if actual != test.expected && !test.expectError {
				t.Errorf("\nОжидали:\n'%s'\nПолучили:\n'%s'", test.expected, actual)
			}
		})
	}
}
