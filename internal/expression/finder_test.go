package expression

import (
	"reflect"
	"strings"
	"testing"
)

func TestFinder_SingleSimpleExpression(t *testing.T) {
	testCases := []struct {
		name     string
		text     string
		expected []string
	}{
		{
			name:     "Простой случай с 1 выражением",
			text:     "Цена равна 2 + 2 доллара.",
			expected: []string{"2 + 2"},
		},
		{
			name:     "Строка без выражения",
			text:     "Цена равна доллара.",
			expected: nil,
		},
		{
			name:     "Строка c негативными выражения",
			text:     "Цена равна -52 - 18 доллара.",
			expected: []string{"-52 - 18"},
		},
		{
			name:     "Строка c просто числами и отрицательнными числами",
			text:     "считаем -1 и -2 и -3 и 0 и 1 2 3 4 5 и еще 6 7 8 22 52 -4442 и -243.423423 324234234234",
			expected: nil,
		},
		{
			name:     "Строка c негативными выражения c дробью",
			text:     "Цена равна -52.4234 - 18.123123 доллара.",
			expected: []string{"-52.4234 - 18.123123"},
		},
		{
			name:     "Строка c негативными выражения и перед ней мусор",
			text:     "+ - - - -- - * --------     -(  2 + 2) + 2.1 * 2.2 - 2.31",
			expected: []string{"-(  2 + 2) + 2.1 * 2.2 - 2.31"},
		},
		{
			name:     "Строка c негативными выражения и перед ней мусор",
			text:     "Реши выражение (  -2.243 + 2) + 2.1 * 2.2 - (2.31+  45) и тогда должно получиться -52 и это ответ не правильный",
			expected: []string{"(  -2.243 + 2) + 2.1 * 2.2 - (2.31+  45)"},
		},
		{
			name:     "Строка c неправильными выражениями",
			text:     "Интерсно (2 + что 2) получиться?",
			expected: nil,
		},
		{
			name:     "Строка c неправильными скобками",
			text:     "Интерсно (2 + 3 получиться? =) смайлик =( грустни смайлик -52.2525 - 48.888888  )",
			expected: []string{"(2 + 3", "-52.2525 - 48.888888  )"},
		},
		{
			name:     "Строка c дублирующимися знаками и выражениями",
			text:     "Интерсно (2 +++++++ 3 получиться? +++ --- +++ ____ ... //// ***********-  ( 4234234.5235235 * -      (      -23.41  ) ****** -(-(-234. - 4234) - 4234.42",
			expected: []string{"(2 +++++++ 3", "-  ( 4234234.5235235 * -      (      -23.41  ) ****** -(-(-234. - 4234) - 4234.42"},
		},
		//{
		//	name:     "Строка c разными знаками подряд",
		//	text:     "Бла бла бла 2 +/ 4 или такое ---------- 234.4234 +*-. 324ю423423",
		//	expected: []string{"2 +/ 4"},
		//},
		{
			name:     "Строка c точкой вместо знака выражения",
			text:     "2 . 2 или 2 /. 2 или 2 *.-/ 52",
			expected: []string{"2 /. 2", "2 *.-/ 52"},
		},
		{
			name:     "Строка c промущеным знаком умножения",
			text:     "    (  2  (3+4)) * 2",
			expected: []string{"(  2  (3+4)) * 2"},
		},
		{
			name:     "Строка c одним коректным выражением и остальное не коретно",
			text:     "строка  2 / 2 +. 4",
			expected: []string{"2 / 2 +. 4"},
		},
		{
			name:     "Строка без точки с другим символом чтобы обойти проверку",
			text:     "2 /2 2 как такое? или 2 /2.423 2",
			expected: nil,
		},
		{
			name: "Строка из 2-х выражений",
			text: "Цена без ндс (7 * 10) - 15 + 12 / (20 - 15) доллара, а с ндс ((57 - 19) * 2 / 15) + 12",
			expected: []string{
				"(7 * 10) - 15 + 12 / (20 - 15)",
				"((57 - 19) * 2 / 15) + 12",
			},
		},
		{
			name: "Строка из 2-х выражений с числами с запятой",
			text: "Цена без ндс (7.1231 * 10) - 15.12 + 12 / (20 - 15.123) доллара, а с ндс ((57.1 - 19) * 2.2 / 15) + 12.432",
			expected: []string{
				"(7.1231 * 10) - 15.12 + 12 / (20 - 15.123)",
				"((57.1 - 19) * 2.2 / 15) + 12.432",
			},
		},
		{
			name: "Сложная строка из англиских русских букв и цифр в перемешку с выражениями",
			text: "22 hello world 123 bla bla bla 12213.23 / 234 _ как дела + *   /    (  2 + 2) + 2.1 * 2.2 - 2.31  новое выражение (  2 * (3+4)) * 2",
			expected: []string{
				"12213.23 / 234",
				"(  2 + 2) + 2.1 * 2.2 - 2.31",
				"(  2 * (3+4)) * 2",
			},
		},
	}

	for _, test := range testCases {
		t.Run(test.name, func(t *testing.T) {
			var expected []FoundExpression
			for _, expression := range test.expected {
				expected = append(expected, FoundExpression{
					expression,
					strings.Index(test.text, expression),
					strings.Index(test.text, expression) + len(expression),
				})
			}

			actual := Finder(test.text)
			if !reflect.DeepEqual(actual, expected) {
				t.Errorf("Ожидали %+v, но получили %+v", expected, actual)
			}
		})
	}
}
